sources:
  app_logs:
    type: file
    include:
      - /logs/app.log

transforms:
  parse_logs:
    type: remap
    inputs:
      - app_logs
    source: |
      # Store the original log message before parsing
      .original_message = .message

      # Parse the log line using the Grok pattern
      parsed, err = parse_grok(.message, "\\[%{LOGLEVEL:level}\\] %{GREEDYDATA:message} at %{TIMESTAMP_ISO8601:timestamp}")

      # Handle errors (e.g., if the log line doesn't match the pattern)
      if err != null {
        log("Failed to parse log line: " + string!(err), level: "error")
      } else {
        # Merge the parsed fields into the event
        . = merge(., parsed)

        # You can also process further if needed, e.g., extracting specific data
        # Log level is already captured as `level`
        # Original message is captured as `original_message`
        # Timestamp is captured as `timestamp`
      }

      # Testing
      .uni_logs_label="test"

sinks:
  kafka:
    type: kafka
    inputs:
      - parse_logs
    bootstrap_servers: broker:29092
    topic: app_logs_topic
    encoding:
      codec: json

  console:
    type: console
    inputs:
      - parse_logs
    encoding:
      codec: json
