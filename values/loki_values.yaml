loki:
  schemaConfig:
    configs:
      - from: '2024-04-01'
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
  storage_config:
    aws:
      region: us-east-1 # for example, eu-west-2
      bucketnames: loki-aws-dev-chunks-unilogs # Your actual S3 bucket name, for example, loki-aws-dev-chunks
      s3forcepathstyle: false
  ingester:
    chunk_encoding: snappy
  pattern_ingester:
    enabled: true
  limits_config:
    allow_structured_metadata: true
    volume_enabled: true
    retention_period: 672h # 28 days retention
  compactor:
    retention_enabled: true
    delete_request_store: s3
  ruler:
    enable_api: true
    storage:
      type: s3
      s3:
        region: us-east-1 # for example, eu-west-2
        bucketnames: loki-aws-dev-ruler-unilogs # Your actual S3 bucket name, for example, loki-aws-dev-ruler
        s3forcepathstyle: false
      alertmanager_url: http://prom:9093 # The URL of the Alertmanager to send alerts (Prometheus, Mimir, etc.)

  querier:
    max_concurrent: 4

  storage:
    type: s3
    bucketNames:
      chunks: 'loki-aws-dev-chunks-unilogs' # Your actual S3 bucket name (loki-aws-dev-chunks)
      ruler: 'loki-aws-dev-ruler-unilogs' # Your actual S3 bucket name (loki-aws-dev-ruler)
      # admin: "<Insert s3 bucket name>" # Your actual S3 bucket name (loki-aws-dev-admin) - GEL customers only
    s3:
      region: us-east-1 # eu-west-2
      #insecure: false
    # s3forcepathstyle: false

serviceAccount:
  create: true
  annotations:
    'eks.amazonaws.com/role-arn': 'arn:aws:iam::<Account ID>:role/LokiServiceAccountRole' # The service role you created

deploymentMode: SimpleScalable
# Holdovers from 
# ingester:
#   replicas: 3
#   zoneAwareReplication:
#     enabled: false

# querier:
#   replicas: 3
#   maxUnavailable: 2

# queryFrontend:
#   replicas: 2
#   maxUnavailable: 1

# queryScheduler:
#   replicas: 2

# distributor:
#   replicas: 3
#   maxUnavailable: 2
# compactor:
#   replicas: 1

# indexGateway:
#   replicas: 2
#   maxUnavailable: 1

# ruler:
#   replicas: 1
#   maxUnavailable: 1

# This exposes the Loki gateway so it can be written to and queried externaly
gateway:
  service:
    type: LoadBalancer
  basicAuth:
    enabled: true
    existingSecret: loki-basic-auth

# Since we are using basic auth, we need to pass the username and password to the canary
lokiCanary:
  extraArgs:
    - -pass=$(LOKI_PASS)
    - -user=$(LOKI_USER)
  extraEnv:
    - name: LOKI_PASS
      valueFrom:
        secretKeyRef:
          name: canary-basic-auth
          key: password
    - name: LOKI_USER
      valueFrom:
        secretKeyRef:
          name: canary-basic-auth
          key: username

# Enable minio for storage
minio:
  enabled: false

backend:
  replicas: 3
  persistence:
    enabled: true
    storageClass: gp2
    size: 1Gi
    claims:
      - name: backend-data
        size: 1Gi
        storageClass: gp2
read:
  replicas: 3
write:
  replicas: 3
  persistence:
    enabled: true
    storageClass: gp2
    size: 1Gi
    claims:
      - name: write-data
        size: 1Gi
        storageClass: gp2

singleBinary:
  replicas: 0
